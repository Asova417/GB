# Создание пустых списков и со значениями

# list_1 = []
# list_1 = list()
# list_1 = [1, 2, 3, 8]
#print(*list_1) #звездочка убирает привыводе квадратные скобки

# for i in list_1:       печатает список в столбик
#     print(i)

# print(len(list_1)) #показывает длинну или количество элементов в списке

#print (list_1[0])  #печатает конкретный элемент под заданным номером массива, если будет внутри кадр скоьбок отрицательное число, то счет буде идти с конца

#Работа со списками

# list_1 = [1, 5]
# print (list_1)
# n = int(input('Введите число, которе необходимо добавить в массив: '))
# list_1.append (n)   # функиций append позволяет добавить число в уже сущетсвующий список
# print (list_1)

# Пример заполнения списка при помощи списка for
# list_1 = []
# for i in range (5):
#     list_1.append(i)
#     print (list_1)


# Удаление последнего элемента списка.
# list_1 = [12, 7, -1, 21, 0]
# print (list_1.pop())
# print (list_1)  # удалится цифра 0
# print (list_1.pop())
# print (list_1)  # удалится цифра 21
# print (list_1.pop())
# print (list_1)  # удалится цифра -1
# print (list_1.pop())
# print (list_1)  # удалится цифра 7

#Ниже будет результат того как отработал код выше
# 0
# [12, 7, -1, 21]
# 21
# [12, 7, -1]
# -1
# [12, 7]
# 7
# [12]

#Удаление конкретного элемента из списка
# list_1 = [12, 7, -1, 21, 0]
# print (list_1.pop(0)) # удалится элемент со значением 12
# print (list_1)

#результат
# 12
# [7, -1, 21, 0]

#Добавление элемента на нужную позицию
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.insert(2, 11)) #там где 2 это номер элемента, 11 это значение которое необходимо добавить
# print(list_1) # [12, 7, 11, -1, 21, 0]  раньше на позиции 3 стояла -1 теперь 11

#Вывод элемента
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#print(list_1[0])  # 1
#print(list_1[len(list_1)-1]) #Выводится последний элемент 10    один хер можно просто минус поставить чтобы много не писать
#print(list_1[-5]) #6
#print(list_1[:])  #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#print(list_1[:2])  #[1, 2]
#print(list_1[len(list_1)-2:]) #[9, 10]
#print(list_1[2:9])    #[3, 4, 5, 6, 7, 8, 9]
#print(list_1[6:18])   #[7, 8, 9, 10]
#print(list_1[len(list_1):6])  #[]
#print(list_1[::6])     #[1, 7]

#ПОСЛЕДНИЕ ЭЛЕМЕНТЫ НЕ ВЫВОДЯТСЯ

#Кортеж - это неизменяемый список. Мало памяти и быстрее. Там где не надо менять значения.

#Создание пустого кортежа
# t = ()
# print(type(t)) # выводится тип  <class 'tuple'>

# t = (1, 5, 3,)
# print(type(t))  #<class 'int'>  чтобы получить тип кортеж просто добавить запятую

# v = [1, 8, 9]
# print (v)
# print (type(v))  # <class 'list'>

# v = tuple(v) #пребразование в кортеж
# print (type(v))  # <class 'tuple'>

# a, b, c = v  # множественное присваивание   a, b, c = 1, 2, 3 т.е a=1, b=2, c=3
# print(a, b, c)  # этим значениям присовились значения v [1 8 9]

#СХОДСТВА И РАЗЛИЧИЯ СПИСКА ОТ КОРТЕЖА
# t = (1, 2, 3, 5)

# print (t[1]) # вывели один элемент
# for i in t: # в столбик распечатает все цифры
#     print(i)

#второй вариант вывод тока другим спосоьбом
# for i in range (len (t)):
#     print(t[i])

# t = [1, 2, 3, 5]
# t[0] = 2
# print (t)

###СЛОВАРИ
# d = {}
# d = dict()

# d['q'] = 'qwerty'
# print(d)

# d['w'] = 'werty'
# print(d)

#удаление ключа del
# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

# del dictionary['left'] # удаление элемента
# for iteam in dictionary:
#     print (iteam)

# результат:
# up
# down
# right

# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

# del dictionary['left'] # удаление элемента
# for (k, v) in dictionary.items():
#     print(k, v)

# результат
# up ↑
# down ↓
# right →


# что такое  dictionary.items():

# dictionary = {}
# dictionary = {'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}

# print (dictionary.items())

#результат
#dict_items([('up', '↑'), ('left', '←'), ('down', '↓'), ('right', '→')])  кортеж 


##Множества  для того чтобы посмотреть как работет просто поочередно удалять строчки кода
# colors = {'red', 'green', 'blue'}
# print(colors) # {'red', 'green', 'blue'}
# colors.add('red')
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray')
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red')
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red'
# colors.discard('red') # ok


#Операции со множеством в Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
#  c = a.copy() # c = {1, 2, 3, 5, 8}   скопировали значения из а в с
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21}  берет только уникальные значения из а и б (нет повторам)
# i = a.intersection(b) # i = {8, 2, 5} показывает только те элементы что есть в обоих множествах, нет уникальным!
# dl = a.difference(b) # dl = {1, 3}  убираются все одинкаовые значения из двух мнодеств остаются только уникальные из множетсва а
# dr = b.difference(a) # dr = {13, 21}  бираются все одинкаовые значения из двух мнодеств остаются только уникальные из множетсва б
# q = a.union(b).difference(a.intersection(b))# {1, 21, 3, 13} тут нужно проделать пару действий
 